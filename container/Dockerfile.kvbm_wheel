# SPDX-FileCopyrightText: Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Most of the commands in this dockerfile is from
# https://github.com/ai-dynamo/nixl/blob/main/contrib/Dockerfile.manylinux

ARG ARCH_ALT="x86_64"

FROM quay.io/pypa/manylinux_2_28_${ARCH_ALT}

ARG ARCH_ALT
ARG ARCH=amd64
ARG NIXL_REF="0.6.0"
ARG DEFAULT_PYTHON_VERSION="3.12"
ARG UCX_REF="v1.19.0"

# Install CUDA 13 as the CUDA library.
# Note: This is only for building and for adding runtime linking for Nixl plugins.
#       Nixl’s Rust bindings are CUDA version agnostic.
COPY container/deps/kvbm/install_cuda13.sh install_cuda13.sh
RUN chmod +x install_cuda13.sh && \
    ./install_cuda13.sh

ENV PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:$PATH \
    LD_LIBRARY_PATH==/usr/local/nvidia/lib:/usr/local/nvidia/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH \
    NVIDIA_DRIVER_CAPABILITIES=video,compute,utility

RUN yum groupinstall -y 'Development Tools' &&  \
    dnf install -y almalinux-release-synergy && \
    dnf config-manager --set-enabled powertools && \
    dnf install -y \
    boost \
    boost-devel \
    clang-devel \
    cmake \
    distribution-gpg-keys-copr \
    dkms \
    flex \
    gflags \
    glibc-headers \
    gcc-c++ \
    libaio \
    libaio-devel \
    libtool-ltdl \
    ninja-build \
    openssl \
    openssl-devel \
    protobuf-compiler \
    protobuf-c-devel \
    protobuf-devel \
    libibverbs \
    libibverbs-devel \
    rdma-core \
    rdma-core-devel \
    libibumad \
    libibumad-devel \
    numactl-devel \
    librdmacm-devel \
    wget \
    zlib

# Build OpenSSL 3.x
RUN yum install -y perl-IPC-Cmd perl-Test-Simple perl-Data-Dumper
RUN cd /tmp && \
    wget -q https://www.openssl.org/source/openssl-3.0.16.tar.gz && \
    tar -xzf openssl-3.0.16.tar.gz && \
    cd openssl-3.0.16 && \
    ./Configure --prefix=/usr/local/openssl3 --openssldir=/usr/local/openssl3 \
        shared zlib linux-${ARCH_ALT} && \
    make -j$(nproc) && \
    make install_sw && \
    echo "/usr/local/openssl3/lib64" > /etc/ld.so.conf.d/openssl3.conf && \
    echo "/usr/local/openssl3/lib" >> /etc/ld.so.conf.d/openssl3.conf && \
    ldconfig && \
    rm -rf /tmp/openssl-3.0.16*

# Set environment variables to use the new OpenSSL
ENV PKG_CONFIG_PATH="/usr/local/openssl3/lib64/pkgconfig:/usr/local/openssl3/lib/pkgconfig:$PKG_CONFIG_PATH"
ENV LD_LIBRARY_PATH="/usr/local/openssl3/lib64:/usr/local/openssl3/lib:$LD_LIBRARY_PATH"
ENV OPENSSL_ROOT_DIR="/usr/local/openssl3"
ENV OPENSSL_LIBRARIES="/usr/local/openssl3/lib64:/usr/local/openssl3/lib"
ENV OPENSSL_INCLUDE_DIR="/usr/local/openssl3/include"

WORKDIR /workspace

RUN git clone --recurse-submodules -b v1.73.0 --depth 1 --shallow-submodules https://github.com/grpc/grpc && \
    cd grpc && \
    mkdir -p cmake/build && \
    cd cmake/build && \
    cmake -DgRPC_INSTALL=ON \
    -DCMAKE_POLICY_VERSION_MINIMUM=3.5 \
    -DgRPC_BUILD_TESTS=OFF \
    -DBUILD_SHARED_LIBS=ON \
    -DCMAKE_CXX_STANDARD=17 \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr/local \
    -DgRPC_SSL_PROVIDER=package ../.. && \
    make -j$(nproc) && \
    make install

ENV LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib64:$LD_LIBRARY_PATH

RUN cd /workspace && \
    git clone --depth 1 https://github.com/etcd-cpp-apiv3/etcd-cpp-apiv3.git && \
    cd etcd-cpp-apiv3 && \
    sed -i '/^find_dependency(cpprestsdk)$/d' etcd-cpp-api-config.in.cmake && \
    mkdir build && cd build && \
    cmake .. -DBUILD_ETCD_CORE_ONLY=ON -DCMAKE_POLICY_VERSION_MINIMUM=3.5 -DCMAKE_BUILD_TYPE=Release && make -j$(nproc) && make install

# The base image libcurl is linked against openssl 1.x, so we need to build from source
# in order to use openssl 3.x. This is needed to build aws-sdk-cpp.
RUN wget https://curl.se/download/curl-8.5.0.tar.gz && \
    tar xzf curl-8.5.0.tar.gz && cd curl-8.5.0 && \
    ./configure --prefix=/usr/local --with-ssl=/usr/local/openssl3 --enable-shared && \
    make -j$(nproc) && make install

RUN git clone --recurse-submodules --depth 1 --shallow-submodules https://github.com/aws/aws-sdk-cpp.git --branch 1.11.581
RUN mkdir aws_sdk_build && cd aws_sdk_build && \
    export LDFLAGS="-L/usr/local/openssl3/lib64 -L/usr/local/openssl3/lib" && \
    export CFLAGS="-I/usr/local/openssl3/include" && \
    export CXXFLAGS="-I/usr/local/openssl3/include" && \
    cmake ../aws-sdk-cpp/ -DCMAKE_BUILD_TYPE=Release -DBUILD_ONLY="s3" -DENABLE_TESTING=OFF -DCMAKE_INSTALL_PREFIX=/usr/local \
        -DCMAKE_PREFIX_PATH="/usr/local/openssl3;/usr/local" \
        -DCURL_LIBRARY=/usr/local/lib/libcurl.so \
        -DCURL_INCLUDE_DIR=/usr/local/include \
        -DOPENSSL_USE_STATIC_LIBS=OFF && \
    make -j${NPROC:-$(nproc)} && make install

COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

ENV RUSTUP_HOME=/usr/local/rustup \
    CARGO_HOME=/usr/local/cargo \
    PATH=/usr/local/cargo/bin:$PATH \
    RUST_VERSION=1.90.0 \
    RUSTARCH=${ARCH_ALT}-unknown-linux-gnu

RUN wget --tries=3 --waitretry=5 "https://static.rust-lang.org/rustup/archive/1.28.1/${RUSTARCH}/rustup-init" && \
    chmod +x rustup-init && \
    ./rustup-init -y --no-modify-path --profile minimal --default-toolchain $RUST_VERSION --default-host ${RUSTARCH} && \
    case "$ARCH_ALT" in \
        aarch64) RUSTUP_SHA256="c64b33db2c6b9385817ec0e49a84bcfe018ed6e328fe755c3c809580cc70ce7a" ;; \
        x86_64) RUSTUP_SHA256="a3339fb004c3d0bb9862ba0bce001861fe5cbde9c10d16591eb3f39ee6cd3e7f" ;; \
        *) echo "Unsupported architecture for Rust: $ARCH_ALT" && exit 1 ;; \
    esac && \
    echo "$RUSTUP_SHA256 *rustup-init" | sha256sum -c - && \
    rm rustup-init && \
    chmod -R a+w $RUSTUP_HOME $CARGO_HOME

RUN wget https://www.mellanox.com/downloads/DOCA/DOCA_v3.1.0/host/doca-host-3.1.0-091000_25.07_rhel89.${ARCH_ALT}.rpm && \
    rpm -i doca-host-3.1.0-091000_25.07_rhel89.${ARCH_ALT}.rpm && \
    dnf install -y libnl3-devel && \
    cd /usr/share/doca-host-3.1.0/repo/Packages/ && \
    rpm -ivh --nodeps doca-sdk-common-*rpm && \
    rpm -ivh --nodeps doca-sdk-rdma-*rpm && \
    rpm -ivh --nodeps doca-sdk-verbs-*rpm && \
    rpm -ivh --nodeps doca-sdk-gpunetio-*rpm && \
    # Check that gpunetio development package is installed correctly
    pkg-config --cflags --libs doca-gpunetio


# Force reinstall of RDMA packages from DOCA repository
# Reinstall needed to fix broken libibverbs-devel, which may lead to lack of Infiniband support.
RUN dnf clean all && \
    dnf makecache && \
    dnf --refresh -y reinstall \
    libibverbs \
    libibverbs-devel \
    rdma-core \
    rdma-core-devel \
    libibumad \
    libibumad-devel \
    numactl-devel \
    librdmacm-devel

ENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH

ENV CUDA_PATH=/usr/local/cuda

RUN cd /workspace && \
    git clone --depth 1 --branch ${NIXL_REF} "https://github.com/ai-dynamo/nixl.git"

WORKDIR /workspace/nixl
ENV VIRTUAL_ENV=/workspace/nixl/.venv
RUN uv venv $VIRTUAL_ENV --python $DEFAULT_PYTHON_VERSION && \
    uv pip install --upgrade meson pybind11 patchelf

RUN rm -rf /usr/lib/ucx
RUN rm -rf /opt/hpcx/ucx

RUN cd /workspace && \
    git clone --depth 1 https://github.com/NVIDIA/gdrcopy.git && \
    cd gdrcopy && \
    git fetch --tags --depth=1 && \
    latest_tag=$(git describe --tags "$(git rev-list --tags --max-count=1)") && \
    git checkout "$latest_tag" && \
    cd packages && \
    CUDA=/usr/local/cuda ./build-rpm-packages.sh && \
    rpm -Uvh gdrcopy-kmod-*.el8.noarch.rpm && \
    rpm -Uvh gdrcopy-*.el8.$ARCH_ALT.rpm && \
    rpm -Uvh gdrcopy-devel-*.el8.noarch.rpm

RUN cd /usr/local/src && \
     git clone https://github.com/openucx/ucx.git && \
     cd ucx && 			     \
     git checkout $UCX_REF &&	     \
     ./autogen.sh && ./configure     \
         --enable-shared             \
         --disable-static            \
         --disable-doxygen-doc       \
         --enable-optimizations      \
         --enable-cma                \
         --enable-devel-headers      \
         --with-cuda=/usr/local/cuda \
         --with-verbs                \
         --with-dm                   \
         --with-gdrcopy=/usr/local   \
         --with-efa                  \
         --enable-mt &&              \
     make -j &&                      \
     make -j install-strip &&        \
     ldconfig

RUN rm -rf build && \
    mkdir build && \
    uv run meson setup build/ --prefix=/usr/local/nixl --buildtype=release \
    -Dcudapath_lib="/usr/local/cuda/lib64" \
    -Dcudapath_inc="/usr/local/cuda/include" && \
    cd build && \
    ninja && \
    ninja install

ENV LD_LIBRARY_PATH=/usr/local/nixl/lib64/:$LD_LIBRARY_PATH
ENV LD_LIBRARY_PATH=/usr/local/nixl/lib64/plugins:$LD_LIBRARY_PATH
ENV NIXL_PLUGIN_DIR=/usr/local/nixl/lib64/plugins
ENV NIXL_PREFIX=/usr/local/nixl

RUN echo "/usr/local/nixl/lib/$ARCH_ALT-linux-gnu" > /etc/ld.so.conf.d/nixl.conf && \
    echo "/usr/local/nixl/lib/$ARCH_ALT-linux-gnu/plugins" >> /etc/ld.so.conf.d/nixl.conf && \
    ldconfig

# Copy necessary rust code for compiling
COPY pyproject.toml README.md LICENSE Cargo.toml Cargo.lock rust-toolchain.toml hatch_build.py /opt/dynamo/
COPY launch/ /opt/dynamo/launch/
COPY lib/ /opt/dynamo/lib/
COPY components/ /opt/dynamo/components/

ENV PATH="/workspace/nixl/.venv/bin:${PATH}"
# Build kvbm wheel
# Copy CUDA 13–based Nixl plugins and required .so files into the kvbm wheel
# so KVBM works with CUDA 13 Nixl even when Nixl isn’t installed on the system.
# TODO: Remove this once the Nixl team releases a `nixl-cu13` pip wheel.
#       That wheel will become a dependency of KVBM.
RUN bash -lc 'echo soft: $(ulimit -Sn); echo hard: $(ulimit -Hn); cat /proc/self/limits | grep -i "open files"'
RUN mkdir -p /opt/dynamo/lib/kvbm/python/kvbm/nixl-cu13 && \
    cp -r /usr/local/nixl/lib64/* /opt/dynamo/lib/kvbm/python/kvbm/nixl-cu13/ && \
    rm -rf /opt/dynamo/lib/kvbm/python/kvbm/nixl-cu13/plugins/libplugin_GPUNETIO.so && \
    rm -rf /opt/dynamo/lib/kvbm/python/kvbm/nixl-cu13/plugins/libplugin_OBJ.so  && \
    cd /opt/dynamo/lib/kvbm && \
    uv pip install maturin[patchelf] && \
    maturin build -j $(nproc) --release --out /opt/dynamo/dist
