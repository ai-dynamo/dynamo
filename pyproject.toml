# SPDX-FileCopyrightText: Copyright (c) 2024-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

[project]
authors = [ { name = "NVIDIA Inc.", email = "sw-dl-dynamo@nvidia.com" } ]
dependencies = [
    "ai-dynamo-runtime==0.5.1",
    "distro",
    "fastapi>=0.115.0",
    "kubernetes>=32.0.1,<33.0.0",
    "pytest>=8.3.4",
    "types-psutil>=7.0.0.20250218",
    # filelock: required by planner
    "click<8.2.0",
    "filelock",
    "setuptools",
    "typer",
]
description = "Distributed Inference Framework"
license = { text = "Apache-2.0" }
license-files = [ "LICENSE" ]
name = "ai-dynamo"
readme = "README.md"
requires-python = ">=3.10"
version = "0.5.1"

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering",
]
keywords = [ "distributed", "dynamo", "genai", "inference", "llm", "nvidia" ]

[project.urls]
Repository = "https://github.com/ai-dynamo/dynamo.git"

[project.optional-dependencies]
trtllm = [ "tensorrt-llm==1.1.0rc5", "uvloop" ]

vllm = [ "nixl<=0.4.1", "uvloop", "vllm[flashinfer]==0.10.2" ]

sglang = [ "nixl<=0.4.1", "sglang[all]==0.5.3rc0", "uvloop" ]

llama_cpp = [ "llama-cpp-python", "uvloop" ]

[build-system]
build-backend = "hatchling.build"
requires      = [ "hatchling" ]

[tool.hatch.build.hooks.custom]
path = "hatch_build.py"

[tool.hatch.build.targets.wheel]
packages = [ "components/src/dynamo" ]

[tool.hatch.metadata]
allow-direct-references = true

[tool.codespell]
# note: pre-commit passes explicit lists of files here, which this skip file list doesn't override -
# this is only to allow you to run codespell interactively
# this also overrides the grpc_generated folder, since it is generated

# Ignore data files and auto-generated files
skip = "./.git,./.github,./lib/llm/tests/data,*.lock,*.sum"

# ignore allowed words used in code
ignore-words-list = "afterall,ser,ende"
# use the 'clear' dictionary for unambiguous spelling mistakes
builtin = "clear"
# use custom dictionary in addition to the built-in one
dictionary = "./codespell.txt"
# disable warnings about binary files and wrong encoding
quiet-level = 3

[tool.isort]
balanced_wrapping              = true
ensure_newline_before_comments = true
force_grid_wrap                = 0
include_trailing_comma         = true
indent                         = "    "
known_first_party              = [ "dynamo" ]
line_length                    = 88
multi_line_output              = 3
profile                        = "black"
skip                           = [ "build" ]
use_parentheses                = true

[tool.pytest.ini_options]
minversion                = "8.0"
tmp_path_retention_policy = "failed"

# NOTE
# We ignore model.py explcitly here to avoid mypy errors with duplicate modules
# pytest overrides the default mypy exclude configuration and so we exclude here as well
addopts = [
    "--ignore-glob=*/llm/tensorrtllm*",
    "--ignore-glob=*_inc.py",
    "--ignore-glob=*model.py",
    "--ignore-glob=*trtllm_integration*",
    "--ignore-glob=*vllm_integration*",
    "--ignore-glob=components/backends/sglang/slurm_jobs/*",
    "--ignore-glob=components/src/dynamo/sglang/multimodal_utils/*",
    "--ignore-glob=components/src/dynamo/sglang/request_handlers/*",
    "--ignore-glob=docs/*",
    "--mypy",
    "--showlocals",
    "--strict-config",
    "--strict-markers",
    "-ra",
    # FIXME: Get relative/generic blob paths to work here
]
filterwarnings = [
    "error",
    "ignore:.*Exception ignored in.*:pytest.PytestUnraisableExceptionWarning", # Ignore unraisable exception warnings
    "ignore:.*PyType_Spec.*custom tp_new.*:DeprecationWarning",                # Ignore protobuf deprecation warning
    "ignore:.*cuda*:DeprecationWarning",                                       # Need this to avoid deprecation warnings from CUDA in tensorrt_llm.
    "ignore:.*multipart.*:PendingDeprecationWarning",
    "ignore:.*pkg_resources.*:DeprecationWarning",
    "ignore:.*pkg_resources.*:UserWarning",
    "ignore:.*unclosed event loop.*:ResourceWarning",                          # Ignore unclosed event loop warnings
    "ignore:.*unclosed.*socket.*:ResourceWarning",                             # Ignore unclosed socket warnings
    "ignore:The pynvml package is deprecated.*:FutureWarning",                 # Ignore pynvml deprecation warning, temporary until upstream library updates to nvidia-ml-py
]
log_cli_level = "INFO"
xfail_strict = true


# NOTE: Can also manually mark tests with @pytest.mark.asyncio
asyncio_mode = "auto"
markers = [
    "e2e: marks tests as end-to-end tests",
    "gpu_1: marks tests to run on GPU",
    "gpu_2: marks tests to run on 2GPUs",
    "gpu_4: marks tests to run on 4GPUs",
    "gpu_8: marks tests to run on 8GPUs",
    "h100: marks tests to run on H100",
    "integration: marks tests as integration tests",
    "kvbm: marks tests for KV behavior and model determinism",
    "model: model id used by a test or parameter",
    "nightly: marks tests to run nightly",
    "pre_merge: marks tests to run before merging",
    "sglang: marks tests as requiring sglang",
    "slow: marks tests as known to be slow",
    "stress: marks tests as stress tests",
    "trtllm: marks tests as requiring trtllm",
    "trtllm_marker: marks tests as requiring trtllm",
    "unit: marks tests as unit tests",
    "vllm: marks tests as requiring vllm",
    "weekly: marks tests to run weekly",
]

# Linting/formatting
[tool.ruff]
# Same as Black.
indent-width = 4
line-length  = 88

[tool.ruff.lint.extend-per-file-ignores]
"*_inc.py"               = [ "F821" ]
"icp/tests/**/test_*.py" = [ "F401", "F811" ]

[tool.mypy]

# --disable-error-code: WAR large set of errors due to mypy not being run
#   previously. We can slowly enable sets of errors to fix over time.
# disable_error_code = []

# --explicit-package-bases: WAR errors about duplicate module names used
#   throughout the llm examples. For example, the common module in
#   tensorrt_llm and vllm are both named common.
explicit_package_bases = true

# --ignore-missing-imports: WAR too many errors when developing outside
#   of container environment with PYTHONPATH set and packages installed.
#   NOTE: Can possibly move mypy from pre-commit to a github action run only in
#   a container with the expected environment and PYTHONPATH setup.
ignore_missing_imports = true

check_untyped_defs = true

[[tool.mypy.overrides]]
# Skip mypy analysis on internal dependencies of vllm
follow_imports         = "skip"
ignore_missing_imports = true
module                 = [ "vllm.*" ]

[tool.sphinx]

# extra-content-head
extra_content_head = [
    '''
   <script src="https://assets.adobedtm.com/5d4962a43b79/c1061d2c5e7b/launch-191c2462b890.min.js" ></script>
   ''',
]

#extra-content-footer
extra_content_footer = [
    '''
   <script type="text/javascript">if (typeof _satellite !== "undefined") {_satellite.pageBottom();}</script>
   ''',
]
