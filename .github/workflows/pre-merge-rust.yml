# SPDX-FileCopyrightText: Copyright (c) 2024-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Rust pre-merge checks

on:
  # Always run this workflow when commits are pushed to main.
  push:
    branches:
    - main
    - "anants/*"

  # Run this workflow on pull requests targeting main but only on rust changes.
  pull_request:
    paths:
    - .github/workflows/pre-merge-rust.yml
    - '**.rs'
    - 'Cargo.toml'
    - 'Cargo.lock'

jobs:
  pre-merge-rust:
    runs-on:
      group: Fastchecker
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@v4
    - name: Set up system dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y protobuf-compiler
    - name: Cache cargo artifacts
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Cache sccache
      uses: actions/cache@v4
      with:
        path: ~/.cache/sccache
        key: ${{ runner.os }}-sccache-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-sccache-

    - name: Install Rust in dev environment
      # Install Rust only to run GitHub Local Actions in (dev environment) using the `ACT` environment variable.
      # See act usage: https://nektosact.com/introduction.html
      # https://nektosact.com/usage/index.html?highlight=env.Act#skipping-steps
      if: ${{ env.ACT }}
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        rustup toolchain install 1.86.0-x86_64-unknown-linux-gnu
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    - name: Set up Rust Toolchain Components
      run: rustup component add rustfmt clippy

    - name: Install sccache
      run: |
        cargo install sccache --locked
        echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
        echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
    - name: Configure cargo for faster builds
      run: |
        echo "CARGO_INCREMENTAL=0" >> $GITHUB_ENV
        echo "CARGO_NET_RETRY=2" >> $GITHUB_ENV
        echo "CARGO_HTTP_TIMEOUT=60" >> $GITHUB_ENV
    - name: Install cargo-deny
      run: cargo-deny --version || cargo install cargo-deny@0.16.4

    - name: Set workspace paths
      run: |
        echo "WORKSPACE_PATHS=Cargo.toml lib/bindings/python/Cargo.toml lib/runtime/examples/Cargo.toml" >> $GITHUB_ENV

    - name: Verify Code Formatting
      run: |
        for manifest in ${{ env.WORKSPACE_PATHS }}; do
          echo "Checking formatting for $manifest"
          cargo fmt --manifest-path "$manifest" -- --check
        done

    - name: Run Clippy Checks
      run: |
        for manifest in ${{ env.WORKSPACE_PATHS }}; do
          echo "Running clippy for $manifest"
          cargo clippy --manifest-path "$manifest" --no-deps --all-targets -- -D warnings
        done

    - name: Run cargo-deny
      run: |
        for manifest in ${{ env.WORKSPACE_PATHS }}; do
          echo "Running cargo-deny for $manifest"
          cargo-deny --manifest-path "$manifest" --no-default-features check --hide-inclusion-graph licenses bans --config ${{ github.workspace }}/deny.toml
        done

    - name: Compile Tests
      run: |
        for manifest in ${{ env.WORKSPACE_PATHS }}; do
          echo "Compiling tests for $manifest"
          cargo test --manifest-path "$manifest" --locked --frozen --no-run
        done

    - name: Run Doc Tests
      run: |
          for manifest in ${{ env.WORKSPACE_PATHS }}; do
            echo "Running doc tests for $manifest"
            cargo doc --manifest-path "$manifest" --no-deps && cargo test --manifest-path "$manifest" --locked --doc
          done
        run: cargo doc --no-deps && cargo test --locked --doc

    - name: Run Unit Tests
      run: |
        for manifest in ${{ env.WORKSPACE_PATHS }}; do
          echo "Running tests for $manifest"
          cargo test --manifest-path "$manifest" --locked --frozen --all-targets --jobs $(nproc)
        done

    - name: Cleanup and show sccache stats
      if: always()
      run: |
        sccache --show-stats || true
        cargo clean --target-dir target || true
