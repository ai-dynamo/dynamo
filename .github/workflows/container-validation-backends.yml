# SPDX-FileCopyrightText: Copyright (c) 2024-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

name: NVIDIA Dynamo Backends Github Validation

on:
  push:
    branches:
      - main
      - "pull-request/[0-9]+"

jobs:
  build-test:
    runs-on: gpu-l40-amd64
    outputs:
      build-duration-sec: ${{ steps.build-image.outputs.build-duration-sec }}
      image-size-bytes: ${{ steps.build-image.outputs.image-size-bytes }}
      image-size-mb: ${{ steps.build-image.outputs.image-size-mb }}
      build-start-time: ${{ steps.build-image.outputs.build-start-time }}
      build-end-time: ${{ steps.build-image.outputs.build-end-time }}
      cache-hit-rate: ${{ steps.build-image.outputs.cache-hit-rate }}
      framework: ${{ matrix.framework }}
      target: ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        framework: [vllm, sglang, trtllm]
        include:
          - framework: vllm
            target: runtime
            pytest_marks: "e2e and vllm and gpu_1 and not slow"
          - framework: sglang
            target: runtime
            pytest_marks: "e2e and sglang and gpu_1 and not slow"
          - framework: trtllm
            target: runtime
            pytest_marks: "e2e and trtllm_marker and gpu_1 and not slow"

    # Do not cancel main branch runs
    concurrency:
      group: ${{ github.workflow }}-${{ matrix.framework }}-build-test-${{ github.ref_name || github.run_id }}
      cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

    name: Build and Test - ${{ matrix.framework }}
    env:
      CONTAINER_ID: test_${{ github.run_id }}_${{ github.run_attempt }}_${{ github.job }}_${{ matrix.framework }}
      PYTEST_XML_FILE: pytest_test_report.xml
      FRAMEWORK: ${{ matrix.framework }}
      TARGET: ${{ matrix.target }}
      PYTEST_MARKS: ${{ matrix.pytest_marks }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to NGC
        if: github.event.pull_request.head.repo.full_name == github.repository || github.event_name == 'push'
        run: |
          echo "${{ secrets.NGC_CI_ACCESS_TOKEN }}" | docker login nvcr.io -u '$oauthtoken' --password-stdin
      - name: Cleanup
        if: always()
        run: |
          docker system prune -af
      - name: Build image
        id: build-image
        env:
          GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          SCCACHE_S3_BUCKET:  ${{ secrets.SCCACHE_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          # Capture build start time
          BUILD_START_TIME=$(date +%s)
          echo "Build started at: $(date -u -d @$BUILD_START_TIME)"
          
          # === COMPREHENSIVE SCCACHE LOGGING (STATUS QUO) ===
          echo "üîç SCCACHE STATUS QUO ANALYSIS"
          echo "=================================="
          
          # 1. Check sccache availability
          echo "üìã Step 1: Checking sccache availability..."
          if command -v sccache >/dev/null 2>&1; then
            echo "‚úÖ sccache found at: $(which sccache)"
            echo "   Version: $(sccache --version 2>/dev/null || echo 'version check failed')"
          else
            echo "‚ùå sccache NOT found in PATH"
            echo "   PATH contents:"
            echo "$PATH" | tr ':' '\n' | head -10 | sed 's/^/     /'
          fi
          
          # 2. Check environment variables
          echo ""
          echo "üìã Step 2: Environment variables..."
          echo "   SCCACHE_S3_BUCKET: '${SCCACHE_S3_BUCKET:-NOT SET}'"
          echo "   AWS_DEFAULT_REGION: '${AWS_DEFAULT_REGION:-NOT SET}'"
          echo "   USE_SCCACHE: '${USE_SCCACHE:-NOT SET}'"
          echo "   HOME: '${HOME:-NOT SET}'"
          echo "   USER: '${USER:-NOT SET}'"
          
          # 3. Reset sccache stats before build (with detailed logging)
          echo ""
          echo "üìã Step 3: Starting sccache server..."
          
          echo "   Stopping existing server..."
          STOP_OUTPUT=$(sccache --stop-server 2>&1 || echo "stop failed")
          echo "   Stop output: $STOP_OUTPUT"
          
          echo "   Starting new server..."
          START_OUTPUT=$(sccache --start-server 2>&1 || echo "start failed")
          echo "   Start output: $START_OUTPUT"
          
          echo "   Zeroing stats..."
          ZERO_OUTPUT=$(sccache --zero-stats 2>&1 || echo "zero failed")
          echo "   Zero output: $ZERO_OUTPUT"
          
          # 4. Check server status after start
          echo ""
          echo "üìã Step 4: Server status check..."
          if command -v sccache >/dev/null 2>&1; then
            echo "   Getting initial stats..."
            INITIAL_STATS=$(sccache --show-stats 2>&1 || echo "stats failed")
            echo "   Initial stats:"
            echo "$INITIAL_STATS" | sed 's/^/     /'
          else
            echo "   ‚ùå Cannot check stats - sccache not available"
          fi
          
          # 5. Run the build with timing
          echo ""
          echo "üìã Step 5: Running build..."
          echo "   Build command: ./container/build.sh --tag ${{ matrix.framework }}:latest --target ${{ matrix.target }} --framework ${{ matrix.framework }} --use-sccache --sccache-bucket \"$SCCACHE_S3_BUCKET\" --sccache-region \"$AWS_DEFAULT_REGION\""
          echo "   Build started at: $(date)"
          
          ./container/build.sh --tag ${{ matrix.framework }}:latest \
            --target ${{ matrix.target }} \
            --framework ${{ matrix.framework }} \
            --use-sccache \
            --sccache-bucket "$SCCACHE_S3_BUCKET" \
            --sccache-region "$AWS_DEFAULT_REGION"
          
          BUILD_RESULT=$?
          echo "   Build completed at: $(date)"
          echo "   Build exit code: $BUILD_RESULT"
          
          # Capture build end time and calculate duration
          BUILD_END_TIME=$(date +%s)
          BUILD_DURATION=$((BUILD_END_TIME - BUILD_START_TIME))
          echo "Build completed at: $(date -u -d @$BUILD_END_TIME)"
          echo "Build duration: ${BUILD_DURATION} seconds"
          
          # === COMPREHENSIVE CACHE ANALYSIS (STATUS QUO) ===
          echo ""
          echo "üìã Step 6: Post-build sccache analysis..."
          
          CACHE_HIT_RATE=0
          if command -v sccache >/dev/null 2>&1; then
            echo "‚úÖ sccache command available for analysis"
            
            # Get raw stats
            echo "   Getting raw sccache stats..."
            SCCACHE_STATS=$(sccache --show-stats 2>&1)
            STATS_EXIT_CODE=$?
            echo "   Stats command exit code: $STATS_EXIT_CODE"
            
            if [ $STATS_EXIT_CODE -eq 0 ] && [ -n "$SCCACHE_STATS" ]; then
              echo ""
              echo "üìä FULL sccache Statistics:"
              echo "----------------------------"
              echo "$SCCACHE_STATS"
              echo "----------------------------"
              echo ""
              
              # Detailed parsing with debug info
              echo "üîç Parsing sccache statistics..."
              
              echo "   Looking for 'Cache hits' pattern..."
              CACHE_HITS_LINE=$(echo "$SCCACHE_STATS" | grep -E "Cache hits" || echo "not found")
              echo "   Cache hits line: '$CACHE_HITS_LINE'"
              CACHE_HITS=$(echo "$CACHE_HITS_LINE" | grep -oE '[0-9]+' | head -1 || echo "0")
              echo "   Extracted cache hits: '$CACHE_HITS'"
              
              echo "   Looking for 'Cache misses' pattern..."
              CACHE_MISSES_LINE=$(echo "$SCCACHE_STATS" | grep -E "Cache misses" || echo "not found")
              echo "   Cache misses line: '$CACHE_MISSES_LINE'"
              CACHE_MISSES=$(echo "$CACHE_MISSES_LINE" | grep -oE '[0-9]+' | head -1 || echo "0")
              echo "   Extracted cache misses: '$CACHE_MISSES'"
              
              echo "   Looking for 'Compile requests' pattern..."
              COMPILE_REQUESTS_LINE=$(echo "$SCCACHE_STATS" | grep -E "Compile requests[^a-z]" || echo "not found")
              echo "   Compile requests line: '$COMPILE_REQUESTS_LINE'"
              COMPILE_REQUESTS=$(echo "$COMPILE_REQUESTS_LINE" | grep -oE '[0-9]+' | head -1 || echo "0")
              echo "   Extracted compile requests: '$COMPILE_REQUESTS'"
              
              echo "   Looking for 'Non-cacheable' pattern..."
              NON_CACHEABLE_LINE=$(echo "$SCCACHE_STATS" | grep -E "Non-cacheable" || echo "not found")
              echo "   Non-cacheable line: '$NON_CACHEABLE_LINE'"
              NON_CACHEABLE=$(echo "$NON_CACHEABLE_LINE" | grep -oE '[0-9]+' | head -1 || echo "0")
              echo "   Extracted non-cacheable: '$NON_CACHEABLE'"
              
              echo "   Looking for 'Non-compilation calls' pattern..."
              NON_COMPILATION_LINE=$(echo "$SCCACHE_STATS" | grep -E "Non-compilation calls" || echo "not found")
              echo "   Non-compilation calls line: '$NON_COMPILATION_LINE'"
              NON_COMPILATION=$(echo "$NON_COMPILATION_LINE" | grep -oE '[0-9]+' | head -1 || echo "0")
              echo "   Extracted non-compilation calls: '$NON_COMPILATION'"
              
              # Calculate totals
              TOTAL_REQUESTS=$((CACHE_HITS + CACHE_MISSES))
              echo ""
              echo "üìà CALCULATION BREAKDOWN:"
              echo "   Cache hits: $CACHE_HITS"
              echo "   Cache misses: $CACHE_MISSES"
              echo "   Total cacheable requests: $TOTAL_REQUESTS"
              echo "   Compile requests: $COMPILE_REQUESTS"
              echo "   Non-cacheable: $NON_CACHEABLE"
              echo "   Non-compilation calls: $NON_COMPILATION"
              
              if [ "$TOTAL_REQUESTS" -gt 0 ]; then
                CACHE_HIT_RATE=$((CACHE_HITS * 100 / TOTAL_REQUESTS))
                echo "   ‚úÖ Hit rate calculation: ($CACHE_HITS * 100) / $TOTAL_REQUESTS = ${CACHE_HIT_RATE}%"
              else
                echo "   ‚ö†Ô∏è  No cacheable requests found - hit rate remains 0%"
                
                if [ "$COMPILE_REQUESTS" -gt 0 ]; then
                  echo "   üîç Analysis: $COMPILE_REQUESTS compile requests but no cache hits/misses"
                  echo "      This suggests sccache received requests but they weren't cacheable"
                elif [ "$NON_COMPILATION" -gt 0 ]; then
                  echo "   üîç Analysis: $NON_COMPILATION non-compilation calls"
                  echo "      This suggests sccache was called but not for actual compilation"
                else
                  echo "   üîç Analysis: No activity detected"
                  echo "      This suggests sccache server is running but not being used"
                fi
              fi
              
              echo ""
              echo "üéØ FINAL RESULT: Cache hit rate = ${CACHE_HIT_RATE}%"
              
            else
              echo "‚ùå Failed to get sccache stats"
              echo "   Stats output: '$SCCACHE_STATS'"
              echo "   This indicates sccache server may not be running or accessible"
            fi
          else
            echo "‚ùå sccache command not available for analysis"
            echo "   This means sccache is not installed or not in PATH"
          fi
          
          # Get Docker image size
          IMAGE_SIZE_BYTES=$(docker image inspect ${{ matrix.framework }}:latest --format='{{.Size}}')
          IMAGE_SIZE_MB=$((IMAGE_SIZE_BYTES / 1024 / 1024))
          echo "Docker image size: ${IMAGE_SIZE_MB} MB (${IMAGE_SIZE_BYTES} bytes)"
          
          # Set outputs for other jobs to use
          echo "build-duration-sec=${BUILD_DURATION}" >> $GITHUB_OUTPUT
          echo "image-size-bytes=${IMAGE_SIZE_BYTES}" >> $GITHUB_OUTPUT
          echo "image-size-mb=${IMAGE_SIZE_MB}" >> $GITHUB_OUTPUT
          echo "build-start-time=${BUILD_START_TIME}" >> $GITHUB_OUTPUT
          echo "build-end-time=${BUILD_END_TIME}" >> $GITHUB_OUTPUT
          echo "cache-hit-rate=${CACHE_HIT_RATE}" >> $GITHUB_OUTPUT
          
          # Also save to file for artifacts (backup method)
          mkdir -p build-metrics
          cat > build-metrics/metrics.json << EOF
          {
            "build_duration_sec": ${BUILD_DURATION},
            "image_size_bytes": ${IMAGE_SIZE_BYTES},
            "image_size_mb": ${IMAGE_SIZE_MB},
            "build_start_time": ${BUILD_START_TIME},
            "build_end_time": ${BUILD_END_TIME},
            "cache_hit_rate": ${CACHE_HIT_RATE},
            "framework": "${{ matrix.framework }}",
            "target": "${{ matrix.target }}"
          }
          EOF
          
          # === STATUS QUO SUMMARY ===
          echo ""
          echo "üèÅ STATUS QUO ANALYSIS COMPLETE"
          echo "==============================="
          echo "üìä Build Metrics Summary:"
          echo "  Framework: ${{ matrix.framework }}"
          echo "  Target: ${{ matrix.target }}"
          echo "  Duration: ${BUILD_DURATION}s"
          echo "  Image Size: ${IMAGE_SIZE_MB} MB"
          echo "  Cache Hit Rate: ${CACHE_HIT_RATE}%"
          echo ""
          echo "üîç Key Findings:"
          if [ "$CACHE_HIT_RATE" -eq 0 ]; then
            echo "  ‚ùå ISSUE: 0% cache hit rate detected"
            echo "     This confirms the problem we're trying to solve"
          else
            echo "  ‚úÖ Cache hit rate: ${CACHE_HIT_RATE}%"
          fi
          echo ""
          echo "üìã This detailed log will help us understand:"
          echo "  1. Whether sccache is installed and accessible"
          echo "  2. If sccache server starts successfully"
          echo "  3. What type of requests sccache receives"
          echo "  4. Why cache hit rate calculation results in 0%"
          echo ""
          echo "üéØ Next step: Apply enhanced sccache workflow to fix issues"
          echo "==============================="
      - name: Run pytest
        env:
          HF_HOME: /runner/_work/_temp
        run: |
          docker run --runtime=nvidia --rm --gpus all -w /workspace \
            --network host \
            --name ${{ env.CONTAINER_ID }}_pytest \
            ${{ matrix.framework }}:latest \
            bash -c "pytest -xsv --basetemp=/tmp --junitxml=${{ env.PYTEST_XML_FILE }} -m \"${{ env.PYTEST_MARKS }}\""
      
      - name: Upload build metrics
        uses: actions/upload-artifact@v4
        if: always()  # Upload even if tests fail
        with:
          name: build-metrics-${{ matrix.framework }}
          path: build-metrics/metrics.json
          retention-days: 7

  
  # Upload metrics for this workflow and all its jobs
  upload-workflow-metrics:
    name: Upload Workflow Metrics
    runs-on: gitlab
    if: always()  # Always run, even if other jobs fail
    needs: [build-test]  # Wait for the main job to complete
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Download build metrics
        uses: actions/download-artifact@v4
        with:
          name: build-metrics-vllm
          path: build-metrics/
        continue-on-error: true  # Don't fail if artifact doesn't exist

      - name: Upload Complete Workflow Metrics
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WORKFLOW_INDEX: ${{ secrets.WORKFLOW_INDEX }}
          JOB_INDEX: ${{ secrets.JOB_INDEX }}
          STEPS_INDEX: ${{ secrets.STEPS_INDEX }}
          # Pass build metrics as environment variables
          BUILD_DURATION_SEC: ${{ needs.build-test.outputs.build-duration-sec }}
          IMAGE_SIZE_BYTES: ${{ needs.build-test.outputs.image-size-bytes }}
          IMAGE_SIZE_MB: ${{ needs.build-test.outputs.image-size-mb }}
          BUILD_START_TIME: ${{ needs.build-test.outputs.build-start-time }}
          BUILD_END_TIME: ${{ needs.build-test.outputs.build-end-time }}
          CACHE_HIT_RATE: ${{ needs.build-test.outputs.cache-hit-rate }}
          BUILD_FRAMEWORK: ${{ needs.build-test.outputs.framework }}
          BUILD_TARGET: ${{ needs.build-test.outputs.target }}
          # Build and container index configuration
          BUILD_INDEX: ${{ secrets.BUILD_INDEX }}
          CONTAINER_INDEX: ${{ secrets.CONTAINER_INDEX }}
        run: |
          # Show build metrics for debugging
          echo "üìä Build Metrics Available:"
          echo "  Duration: ${BUILD_DURATION_SEC} seconds"
          echo "  Image Size: ${IMAGE_SIZE_MB} MB (${IMAGE_SIZE_BYTES} bytes)"
          echo "  Cache Hit Rate: ${CACHE_HIT_RATE}%"
          echo "  Framework: ${BUILD_FRAMEWORK}"
          echo "  Target: ${BUILD_TARGET}"
          
          # Check if build metrics file exists
          if [ -f "build-metrics/metrics.json" ]; then
            echo "üìÅ Build metrics file found:"
            cat build-metrics/metrics.json
          else
            echo "‚ö†Ô∏è  Build metrics file not found, using job outputs only"
          fi
          
          # Run the enhanced metrics upload script
          python3 .github/workflows/upload_complete_workflow_metrics.py
