# SPDX-FileCopyrightText: Copyright (c) 2024-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

name: Docker Build and Test

on:
  push:
    branches:
      - main
      - "pull-request/[0-9]+"

concurrency:
    group: ${{ github.workflow }}-build-test-${{ github.ref_name || github.run_id }}
    cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  changed-files:
    runs-on: ubuntu-latest
    outputs:
      has_code_changes: ${{ steps.filter.outputs.has_code_changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955  # v4.3.0
      - name: Check for changes
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36  # v3.0.2
        id: filter
        with:
          filters: .github/filters.yaml

  backend-status-check:
    runs-on: ubuntu-latest
    needs: [vllm, sglang, trtllm]
    if: always()
    steps:
      - name: "Check all dependent jobs"
        run: |
          echo '${{ toJson(needs) }}' | jq -e 'to_entries | map(.value.result) | all(. as $result | ["success", "skipped"] | any($result == .))'

  vllm:
    runs-on: gpu-l40-amd64
    needs: changed-files
    if: needs.changed-files.outputs.has_code_changes == 'true'
    outputs:
      build-duration-sec: ${{ steps.build-image.outputs.build-duration-sec }}
      image-size-bytes: ${{ steps.build-image.outputs.image-size-bytes }}
      image-size-mb: ${{ steps.build-image.outputs.image-size-mb }}
      build-start-time: ${{ steps.build-image.outputs.build-start-time }}
      build-end-time: ${{ steps.build-image.outputs.build-end-time }}
      cache-hit-rate: ${{ steps.build-image.outputs.cache-hit-rate }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955  # v4.3.0
      - name: Build Container
        id: build-image
        uses: ./.github/actions/docker-build
        with:
          framework: vllm
          target: runtime
          ngc_ci_access_token: ${{ secrets.NGC_CI_ACCESS_TOKEN }}
          ci_token: ${{ secrets.CI_TOKEN }}
          aws_default_region: ${{ secrets.AWS_DEFAULT_REGION }}
          sccache_s3_bucket: ${{ secrets.SCCACHE_S3_BUCKET }}
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Run tests
        uses: ./.github/actions/pytest
        with:
          image_tag: ${{ steps.build-image.outputs.image_tag }}
          pytest_marks: "e2e and vllm and gpu_1 and not slow"

  sglang:
    runs-on: gpu-l40-amd64
    needs: changed-files
    if: needs.changed-files.outputs.has_code_changes == 'true'
    outputs:
      build-duration-sec: ${{ steps.build-image.outputs.build-duration-sec }}
      image-size-bytes: ${{ steps.build-image.outputs.image-size-bytes }}
      image-size-mb: ${{ steps.build-image.outputs.image-size-mb }}
      build-start-time: ${{ steps.build-image.outputs.build-start-time }}
      build-end-time: ${{ steps.build-image.outputs.build-end-time }}
      cache-hit-rate: ${{ steps.build-image.outputs.cache-hit-rate }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955  # v4.3.0
      - name: Build Container
        id: build-image
        uses: ./.github/actions/docker-build
        with:
          framework: sglang
          target: runtime
          ngc_ci_access_token: ${{ secrets.NGC_CI_ACCESS_TOKEN }}
          ci_token: ${{ secrets.CI_TOKEN }}
          aws_default_region: ${{ secrets.AWS_DEFAULT_REGION }}
          sccache_s3_bucket: ${{ secrets.SCCACHE_S3_BUCKET }}
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Run tests
        uses: ./.github/actions/pytest
        with:
          image_tag: ${{ steps.build-image.outputs.image_tag }}
          pytest_marks: "e2e and sglang and gpu_1"

  trtllm:
    runs-on: gpu-l40-amd64
    needs: changed-files
    if: needs.changed-files.outputs.has_code_changes == 'true'
    outputs:
      build-duration-sec: ${{ steps.build-image.outputs.build-duration-sec }}
      image-size-bytes: ${{ steps.build-image.outputs.image-size-bytes }}
      image-size-mb: ${{ steps.build-image.outputs.image-size-mb }}
      build-start-time: ${{ steps.build-image.outputs.build-start-time }}
      build-end-time: ${{ steps.build-image.outputs.build-end-time }}
      cache-hit-rate: ${{ steps.build-image.outputs.cache-hit-rate }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955  # v4.3.0
      - name: Build Container
        id: build-image
        uses: ./.github/actions/docker-build
        with:
          framework: trtllm
          target: runtime
          ngc_ci_access_token: ${{ secrets.NGC_CI_ACCESS_TOKEN }}
          ci_token: ${{ secrets.CI_TOKEN }}
          aws_default_region: ${{ secrets.AWS_DEFAULT_REGION }}
          sccache_s3_bucket: ${{ secrets.SCCACHE_S3_BUCKET }}
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Run tests
        uses: ./.github/actions/pytest
        with:
          image_tag: ${{ steps.build-image.outputs.image_tag }}
          pytest_marks: "e2e and trtllm_marker and gpu_1 and not slow"

  # Upload metrics for this workflow and all its jobs
  upload-workflow-metrics:
    name: Upload Workflow Metrics
    runs-on: gitlab
    if: always()  # Always run, even if other jobs fail
    needs: [vllm, sglang, trtllm]  # Wait for all framework jobs to complete
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Upload Complete Workflow Metrics
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WORKFLOW_INDEX: ${{ secrets.WORKFLOW_INDEX }}
          JOB_INDEX: ${{ secrets.JOB_INDEX }}
          STEPS_INDEX: ${{ secrets.STEPS_INDEX }}
          CONTAINER_INDEX: ${{ secrets.CONTAINER_INDEX }}
          # Build metrics for vllm
          VLLM_BUILD_DURATION_SEC: ${{ needs.vllm.outputs.build-duration-sec }}
          VLLM_IMAGE_SIZE_BYTES: ${{ needs.vllm.outputs.image-size-bytes }}
          VLLM_IMAGE_SIZE_MB: ${{ needs.vllm.outputs.image-size-mb }}
          VLLM_BUILD_START_TIME: ${{ needs.vllm.outputs.build-start-time }}
          VLLM_BUILD_END_TIME: ${{ needs.vllm.outputs.build-end-time }}
          VLLM_CACHE_HIT_RATE: ${{ needs.vllm.outputs.cache-hit-rate }}
          # Build metrics for sglang
          SGLANG_BUILD_DURATION_SEC: ${{ needs.sglang.outputs.build-duration-sec }}
          SGLANG_IMAGE_SIZE_BYTES: ${{ needs.sglang.outputs.image-size-bytes }}
          SGLANG_IMAGE_SIZE_MB: ${{ needs.sglang.outputs.image-size-mb }}
          SGLANG_BUILD_START_TIME: ${{ needs.sglang.outputs.build-start-time }}
          SGLANG_BUILD_END_TIME: ${{ needs.sglang.outputs.build-end-time }}
          SGLANG_CACHE_HIT_RATE: ${{ needs.sglang.outputs.cache-hit-rate }}
          # Build metrics for trtllm
          TRTLLM_BUILD_DURATION_SEC: ${{ needs.trtllm.outputs.build-duration-sec }}
          TRTLLM_IMAGE_SIZE_BYTES: ${{ needs.trtllm.outputs.image-size-bytes }}
          TRTLLM_IMAGE_SIZE_MB: ${{ needs.trtllm.outputs.image-size-mb }}
          TRTLLM_BUILD_START_TIME: ${{ needs.trtllm.outputs.build-start-time }}
          TRTLLM_BUILD_END_TIME: ${{ needs.trtllm.outputs.build-end-time }}
          TRTLLM_CACHE_HIT_RATE: ${{ needs.trtllm.outputs.cache-hit-rate }}
        run: |
          # Show build metrics for debugging
          echo "ðŸ“Š Build Metrics Available:"
          echo "VLLM - Duration: ${VLLM_BUILD_DURATION_SEC}s, Size: ${VLLM_IMAGE_SIZE_MB}MB, Cache: ${VLLM_CACHE_HIT_RATE}%"
          echo "SGLANG - Duration: ${SGLANG_BUILD_DURATION_SEC}s, Size: ${SGLANG_IMAGE_SIZE_MB}MB, Cache: ${SGLANG_CACHE_HIT_RATE}%"
          echo "TRTLLM - Duration: ${TRTLLM_BUILD_DURATION_SEC}s, Size: ${TRTLLM_IMAGE_SIZE_MB}MB, Cache: ${TRTLLM_CACHE_HIT_RATE}%"
          
          # Run the enhanced metrics upload script
          python3 .github/workflows/upload_complete_workflow_metrics.py