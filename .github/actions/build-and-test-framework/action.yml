# SPDX-FileCopyrightText: Copyright (c) 2024-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

name: 'Build and Test Framework'
description: 'Composite action to build and test a specific framework'

inputs:
  framework:
    description: 'Framework name (vllm, sglang, trtllm)'
    required: true
  target:
    description: 'Build target (runtime, dev)'
    required: true
    default: 'runtime'
  pytest_marks:
    description: 'Pytest marks to run'
    required: true
  ngc_token:
    description: 'NGC access token'
    required: false
  github_token:
    description: 'GitHub token'
    required: false
  aws_region:
    description: 'AWS region'
    required: false
  sccache_bucket:
    description: 'SCache S3 bucket'
    required: false
  aws_access_key_id:
    description: 'AWS access key ID'
    required: false
  aws_secret_access_key:
    description: 'AWS secret access key'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to NGC
      if: inputs.ngc_token != ''
      shell: bash
      run: |
        echo "${{ inputs.ngc_token }}" | docker login nvcr.io -u '$oauthtoken' --password-stdin
        
    - name: Cleanup
      shell: bash
      run: |
        docker system prune -af
        
    - name: Build image
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        AWS_DEFAULT_REGION: ${{ inputs.aws_region }}
        SCCACHE_S3_BUCKET: ${{ inputs.sccache_bucket }}
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
      run: |
        ./container/build.sh --tag ${{ inputs.framework }}:latest \
          --target ${{ inputs.target }} \
          --framework ${{ inputs.framework }} \
          --use-sccache \
          --sccache-bucket "$SCCACHE_S3_BUCKET" \
          --sccache-region "$AWS_DEFAULT_REGION"
          
    - name: Run pytest
      shell: bash
      env:
        CONTAINER_ID: test_${{ github.run_id }}_${{ github.run_attempt }}_${{ github.job }}_${{ inputs.framework }}
        PYTEST_XML_FILE: pytest_test_report.xml
      run: |
        docker run --runtime=nvidia --rm --gpus all -w /workspace \
          --network host \
          --name ${{ env.CONTAINER_ID }}_pytest \
          ${{ inputs.framework }}:latest \
          bash -c "pytest -xsv --basetemp=/tmp --junitxml=${{ env.PYTEST_XML_FILE }} -m \"${{ inputs.pytest_marks }}\""
