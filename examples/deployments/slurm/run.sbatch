#!/bin/bash
#SBATCH --job-name=dynamo_pipeline
#SBATCH --output=/path/to/output/%x_%j.log
#SBATCH --gpus-per-node=8



# Default parameters values
set -a
NUM_PREFILL_WORKERS=$(( SLURM_JOB_NUM_NODES / 2 ))
GPUS_PER_PREFILL_WORKER=8

NUM_DECODE_WORKERS=$(( SLURM_JOB_NUM_NODES / 2 ))
GPUS_PER_DECODE_WORKER=8

DYNAMO_CONTAINER="/path/to/dynamo.sqsh" # Dynamo container as a squash file - generated by NVIDIA's enroot tool

# Example config for v0.3.2 vllm_v1 example (github.com/ai-dynamo/dynamo/tree/v0.3.2/examples/vllm_v1)
# This config spawns one frontend that also do decode, the rest of the nodes are prefill or decode workers
GRAPH_DIR="examples/vllm_v1" # Relative to dynamo source code 
CONFIG="configs/disagg.yaml" # Relative to GRAPH_DIR
FRONTEND_GRAPH="graphs.agg:Frontend"
PREFILL_COMPONENT="components.worker:VllmPrefillWorker"
DECODE_COMPONENT="components.worker:VllmDecodeWorker"
set +a # End of default parameters values

# Parse arguments - can override default parameters values
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        --num-prefill-workers)
            NUM_PREFILL_WORKERS="$2"
            NUM_DECODE_WORKERS=$(( SLURM_JOB_NUM_NODES - NUM_PREFILL_WORKERS ))
            shift
            shift
            ;;
        --gpus-per-prefill)
            GPUS_PER_PREFILL_WORKER="$2"
            shift
            shift
            ;;
        --gpus-per-decode)
            GPUS_PER_DECODE_WORKER="$2"
            shift
            shift
            ;;
        --container)
            DYNAMO_CONTAINER="$2"
            shift
            shift
            ;;
        *)
            shift
            ;;
    esac
done

if [[ "$NUM_PREFILL_WORKERS" -lt 1 || "$NUM_DECODE_WORKERS" -lt 1 ]]; then
    echo "Error: NUM_PREFILL_WORKERS and NUM_DECODE_WORKERS must both be at least 1."
    exit 1
fi

if (( NUM_PREFILL_WORKERS + NUM_DECODE_WORKERS > SLURM_JOB_NUM_NODES )); then
    echo "Error: The sum of NUM_PREFILL_WORKERS and NUM_DECODE_WORKERS cannot exceed SLURM_JOB_NUM_NODES ($SLURM_JOB_NUM_NODES)."
    exit 1
fi

# Internal variables
set -a
DYNAMO_FRONTEND=$(hostname)
SLURM_NODES=($(scontrol show hostnames $SLURM_JOB_NODELIST))
not_frontend_nodes=() 
for node in "${SLURM_NODES[@]}"; do
    if [[ "$node" != "$DYNAMO_FRONTEND" ]]; then
        not_frontend_nodes+=("$node")
    fi
done
DECODE_NODES=()
PREFILL_NODES=()

# Assign the first (NUM_DECODE_WORKERS-1) nodes as DECODE_NODES
for ((i=0; i<NUM_DECODE_WORKERS-1; i++)); do
    DECODE_NODES+=("${not_frontend_nodes[$i]}")
done

# The rest go to PREFILL_NODES
for ((i=NUM_DECODE_WORKERS-1; i<${#not_frontend_nodes[@]}; i++)); do
    PREFILL_NODES+=("${not_frontend_nodes[$i]}")
done

# Convert arrays to comma-separated strings for srun
PREFILL_NODES_STR=$(IFS=','; echo "${PREFILL_NODES[*]}")
DECODE_NODES_STR=$(IFS=','; echo "${DECODE_NODES[*]}")

NATS_SERVER="nats://$(hostname):4222"
ETCD_ENDPOINTS="http://$(hostname):2379"
HF_HOME="/root/.cache/huggingface"

VLLM_NIXL_SIDE_CHANNEL_PORT=5550 
VLLM_NIXL_SIDE_CHANNEL_PORT=5551
set +a

if [ -z "$HF_TOKEN" ]; then
    echo "Warning: Hugging face token not found. I probably won't be able to download models. If this is the case, set the HF_TOKEN environment variable."
fi


# You can mount the dynamo source code directory to /workspace if you want to run a local version of dynamo
mounts="/tmp:/tmp,/mnt:/mnt,${XDG_CACHE_HOME}/huggingface:${HF_HOME}"

echo "########################################################"
echo "Dynamo frontend: ${DYNAMO_FRONTEND}"
echo "Prefill nodes ($NUM_PREFILL_WORKERS): ${PREFILL_NODES_STR}"
echo "Decode nodes ($(NUM_DECODE_WORKERS-1)): ${DECODE_NODES_STR}"
echo "Number of prefill workers: ${NUM_PREFILL_WORKERS}"
echo "Number of decode workers: ${NUM_DECODE_WORKERS}"
echo "GPUs per prefill worker: ${GPUS_PER_PREFILL_WORKER}"
echo "GPUs per decode worker: ${GPUS_PER_DECODE_WORKER}"
echo "NATS Server: ${NATS_SERVER}"
echo "ETCD Endpoints: ${ETCD_ENDPOINTS}"
echo "XDG_CACHE_HOME: ${XDG_CACHE_HOME}"
echo "HF Home (container): ${HF_HOME}"
echo "Mounts: ${mounts}"
echo "########################################################"

# Create hf cache dir on all nodes
srun --job-name="prepare_huggingface" -N $SLURM_JOB_NUM_NODES --ntasks-per-node=1 mkdir -p ${XDG_CACHE_HOME}/huggingface

# Load container 
srun --job-name="load_container" -N $SLURM_JOB_NUM_NODES --ntasks-per-node=1 --container-image=${DYNAMO_CONTAINER} --container-name=dynamo hostname > /dev/null

# Start metrics - use https://github.com/ai-dynamo/dynamo/blob/main/deploy/docker-compose.yml
docker-compose -f /path/to/dynamo/deploy/metrics/docker-compose.yml up -d

##### Start serving  #####
srun -N 1 \
    --gpus-per-node=$SLURM_GPUS_PER_NODE \
    --ntasks-per-node=1 \
    --container-image=${DYNAMO_CONTAINER} \
    --container-mounts=${mounts} \
    --job-name=frontend \
    --container-name=dynamo \
    -w ${DYNAMO_FRONTEND} \
    bash -c '
    stdout_prefixer() { while IFS= read -r line; do echo "[$(hostname)] $line"; done; }
    stderr_prefixer() { while IFS= read -r line; do echo "[$(hostname)] $line" >&2; done; }

    LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/opt/dynamo/venv/lib/python3.12/site-packages/.nixl.mesonpy.libs/plugins/"
    huggingface-cli login --token $HF_TOKEN

    # Run frontend+decode
    cd /workspace/${GRAPH_DIR}
    dynamo serve ${FRONTEND_GRAPH} -f ${CONFIG} > >(stdout_prefixer) 2> >(stderr_prefixer)
    ' & frontend_pid=$!

# Prefill nodes
srun -N $NUM_PREFILL_WORKERS \
    --gpus-per-node=$SLURM_GPUS_PER_NODE \
    --ntasks-per-node=1 \
    --container-image=${DYNAMO_CONTAINER} \
    --container-mounts=${mounts} \
    --job-name=prefill \
    --container-name=dynamo \
    -w ${PREFILL_NODES_STR} \
    bash -c '
    stdout_prefixer() { while IFS= read -r line; do echo "[$(hostname)] $line"; done; }
    stderr_prefixer() { while IFS= read -r line; do echo "[$(hostname)] $line" >&2; done; }

    LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/opt/dynamo/venv/lib/python3.12/site-packages/.nixl.mesonpy.libs/plugins/"
    huggingface-cli login --token $HF_TOKEN

    # Run prefill
    cd /workspace/${GRAPH_DIR}
    dynamo serve ${PREFILL_COMPONENT} -f ${CONFIG} > >(stdout_prefixer) 2> >(stderr_prefixer)
    ' &

# Decode nodes 
if [ -n "$DECODE_NODES_STR" ]; then
    srun --gpus-per-node=$SLURM_GPUS_PER_NODE \
        --ntasks-per-node=1 \
        --container-image=${DYNAMO_CONTAINER} \
        --container-mounts=${mounts} \
        --job-name=decode \
        --container-name=dynamo \
        -N $((NUM_DECODE_WORKERS-1)) \
        -w ${DECODE_NODES_STR} \
        bash -c '
        stdout_prefixer() { while IFS= read -r line; do echo "[$(hostname)] $line"; done; }
        stderr_prefixer() { while IFS= read -r line; do echo "[$(hostname)] $line" >&2; done; }

        LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/opt/dynamo/venv/lib/python3.12/site-packages/.nixl.mesonpy.libs/plugins/"
        huggingface-cli login --token $HF_TOKEN

        # Run decode
        cd /workspace/${GRAPH_DIR}
        dynamo serve ${DECODE_COMPONENT} -f ${CONFIG} > >(stdout_prefixer) 2> >(stderr_prefixer)
        ' &
else 
    echo "No decode nodes specified, skipping decode nodes"
fi

wait $frontend_pid
