# SPDX-FileCopyrightText: Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

# ### READ ME #####################################################################
#
# This chart is intended to enable the configuration of a Dynamo graph for deployment into a Kubernetes cluster.
#
# Dependencies:
# - Must have run "helm install dynamo-platform ./platform/" from the ai-dynamo/dynamo repository.
# - prometheus-community/kube-prometheus-stack chart.
#
# Most of the values in this file are optional with reasonable default values.
# There are however several values which are required before installation of the chart can succeed.
# Look for the (REQUIRED) label on the values below to identify the required values.
#
# Every Dynamo graph is comprised of the Frontend service and one or more components.
#
# #################################################################################

# `dynamo`: Configuration option for deploying a Dynamo pipeline.
dynamo:
  # `dynamo.name`: The Dynamo namespace of the Dynamo pipeline being deployed.
  #                All deployments, pods, etc. will include this name.
  #                Names must match the following expression /^[a-z][\w\-]*$/ to retain compliance with Kubernetes object name requirements.
  name: # (REQUIRED)
  # `dynamo.components`: List of components to be deployed as part of the Dynamo pipeline.
  #                      Do not include the frontend component, as it is always included.
  #                      Names must match the following expression /^[a-z][\w\-]*$/ to retain compliance with Kubernetes object name requirements.
  components:
    # `dynamo.component.name`: Name of the component.
    #                          Component names must be unique to its Dynamo pipeline.
    #                          Affects the name of Kubernetes deployments and pods related to this component.
  - name: # (REQUIRED)
    # `dynamo.component.image`: Container image required by this component to function.
    image: # (REQUIRED)
    # `dynamo.component.resource`: Configuration options managing cluster resources assigned to the component.
    resources:
      # `dynamo.component.resources.cpu`: Number of logical CPU cores reserved and assigned to this component (default: 4).
      cpu:
      # `dynamo.component.resources.gpu`: Number of GPU devices reserved and assigned to this component (default: 1).
      gpu:
      # `dynamo.component.resources.memory`: Amount of system or CPU addressable memory reserved and assigned to this component (default: 16Gi).
      #                                      This value must be presented in Kubernetes memory units.
      memory:
    # `dynamo.components.systems`: Configuration options for managing how metrics and tracing are generated by Dynamo components.
    systems:
      # `dynamo.components.systems.enable`: When `true` metrics and tracing systems are enabled; otherwise they are disabled (default: true).
      enable:
      # `dynamo.components.systems.port`: Port portion of the URL used to collect metrics from the component (default: 8000).
      port:
      # `dynamo.components.systems.useEndpointHealthStatus`: Name of the endpoint used to determine if the component is ready or not (default: ["generate"]).
      useEndpointHealthStatus:
    # `dynamo.components.envs`: List of environment variables to provided to the component.
    envs: []
    # `dynamo.components.probes`: Configuration options managing how the state probes behaves.
    probes:
      # `dynamo.components.probes.liveness`: Configuration options managing how the liveness probe behaves.
      liveness:
        # `dynamo.components.probes.liveness.path`: Path portion of the URL used by the probe to query the component's liveness (default: '/live').
        path:
        # `dynamo.components.probes.liveness.port`: Port portion of the URL used by the probe to query the component's liveness (default: 8000).
        port:
      # `dynamo.components.probes.readiness`: Configuration options managing how the readiness probe behaves.
      readiness:
        # `dynamo.components.probes.readiness.path`: Path portion of the URL used by the probe to query the component's liveness (default: '/ready').
        path:
        # `dynamo.components.probes.readiness.port`: Port portion of the URL used by the probe to query the component's liveness (default: 8000).
        port:
      # `dynamo.components.probes.startup`: Configuration options managing how the startup probe behaves.
      startup:
        # `dynamo.components.probes.startup.path`: Path portion of the URL used by the probe to query the component's liveness (default: '/health').
        path:
        # `dynamo.components.probes.startup.port`: Port portion of the URL used by the probe to query the component's liveness (default: 8000).
        port:
      # `dynamo.components.probes.metrics`: Configuration options managing how the metrics probe behaves.
      #                                     This endpoint is expected to produce Prometheus compatible output.
      metrics:
        # `dynamo.components.probes.metrics.path`: Path portion of the URL used by the probe to query the component's liveness (default: '/metrics').
        path:
    # `dynamo.components.workingDir`: Working directory of the component's container's file system (default: '/workspace').
    workingDir:
    # 'dynamo.components.workingDir': Specifies the command use to initiate the component process.
    command: # (REQUIRED)
    # `dynamo.component.logLevel`: Specified the logging level used by the component's logger (default: `info`).
    logLevel:
  # `dynamo.frontend`: Configuration options related to operation of the Dynamo frontend.
  frontend:
    # `dynamo.frontend.image`: Container image required by the frontend to function.
    image: # (REQUIRED)
    # `dynamo.frontend.enableKvRouter`: Configuration option managing KV routing (default: `nil`).
    #                                   The only value supported currently is 'kv'.
    #                                   To not configure dynamo KV routing, omit this property or leave it unassigned.
    routerMode:
    # `dynamo.frontend.resource`: Configuration options managing cluster resources assigned to the frontend.
    resources:
      # `dynamo.frontend.resources.cpu`: Number of logical CPU cores reserved and assigned to the frontend (default: 2).
      cpu:
      # `dynamo.frontend.resources.gpu`: Number of GPU devices reserved and assigned to the frontend (default: 0).
      gpu:
      # `dynamo.frontend.resources.memory`: Amount of system or CPU addressable memory reserved and assigned to the frontend (default: 4Gi).
      #                                     This value must be presented in Kubernetes memory units.
      memory:
     # `dynamo.frontend.workingDir`: Working directory of the frontend's container's file system (default: '/workspace').
    workingDir:
    # `dynamo.frontend.command`: Specifies the command used to initiate the frontend process (default: 'python3 -m dynamo.frontend --http-port 8000').
    command:
    # `dynamo.frontend.logLevel`: Specified the logging level used by the frontend's logger (default: `info`).
    logLevel:

# `services`: Configuration options for managing how components interact with external services.
services:
  # `services.etcd`: URL components should use to communicate with etcd services (default 'dynamo-platform-etcd:2379').
  etcd:
  # `services.nats`: URL components will use to communicate with nats.io services (default: 'nats://dynamo-platform-nats:4222').
  nats:

# `pullSecrets`: Credentials or bearer tokens required to authenticate with content providers.
pullSecrets:
  # `pullSecrets.container`: Container credentials use to download the necessary container(s) to the node.
  container: []
    # `pullSecrets.container.name`: Name of the Kubernetes docker-registry-secret in the cluster containing the necessary credentials.
    # - name: ngc-container-pull
  # `pullSecrets.model`: Hugging Face credentials use to download the necessary model(s) to the workers.
  model:
    # `pullSecrets.model.key`: Username portion of the credentials.
    #                          Necessary for Kubernetes to correctly map the credentials provided to the HF_TOKEN environment variable.
    key:
    # `pullSecrets.model.name`: Name of the Kubernetes generic-secret object in the cluster containing the necessary credentials.
    name:
